// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using cafeRecAPI.Data;

#nullable disable

namespace cafeRecAPI.Migrations
{
    [DbContext(typeof(CafeDBContext))]
    [Migration("20240606042847_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("cafeRecAPI.Models.Cafe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CafeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlaceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Cafes");
                });

            modelBuilder.Entity("cafeRecAPI.Models.CafeLocation+CafeSearchLocation", b =>
                {
                    b.Property<int>("CafeId")
                        .HasColumnType("integer");

                    b.Property<int>("SearchLocationId")
                        .HasColumnType("integer");

                    b.HasKey("CafeId", "SearchLocationId");

                    b.HasIndex("SearchLocationId");

                    b.ToTable("CafeSearchLocations");
                });

            modelBuilder.Entity("cafeRecAPI.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CafeId")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CafeId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("cafeRecAPI.Models.SearchLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Location")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("cafeRecAPI.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("cafeRecAPI.Models.CafeLocation+CafeSearchLocation", b =>
                {
                    b.HasOne("cafeRecAPI.Models.Cafe", "Cafe")
                        .WithMany("CafeSearchLocations")
                        .HasForeignKey("CafeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cafeRecAPI.Models.SearchLocation", "SearchLocation")
                        .WithMany("CafeSearchLocations")
                        .HasForeignKey("SearchLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cafe");

                    b.Navigation("SearchLocation");
                });

            modelBuilder.Entity("cafeRecAPI.Models.Review", b =>
                {
                    b.HasOne("cafeRecAPI.Models.Cafe", "Cafe")
                        .WithMany("Reviews")
                        .HasForeignKey("CafeId");

                    b.Navigation("Cafe");
                });

            modelBuilder.Entity("cafeRecAPI.Models.Cafe", b =>
                {
                    b.Navigation("CafeSearchLocations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("cafeRecAPI.Models.SearchLocation", b =>
                {
                    b.Navigation("CafeSearchLocations");
                });
#pragma warning restore 612, 618
        }
    }
}
